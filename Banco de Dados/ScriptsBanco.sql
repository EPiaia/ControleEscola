CREATE TABLE ESTADO (
    ID       INT          NOT NULL,
    CODIGOUF INT          NOT NULL,
    NOME     VARCHAR (50) NOT NULL,
    UF       CHAR 	 (2)  NOT NULL,
    REGIAO   INT	      NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE MUNICIPIO (
  ID 	 INT 		  NOT NULL,
  CODIGO INT		  NOT NULL,
  NOME 	 VARCHAR(255) NOT NULL,
  UF	 CHAR(2)	  NOT NULL,
  ESTADO_ID INT,
  PRIMARY KEY (ID),
  CONSTRAINT FK_MUN_ESTADO FOREIGN KEY (ESTADO_ID) REFERENCES ESTADO(ID)
);

CREATE TABLE PESSOA (
	ID INT NOT NULL,
	NOME VARCHAR(255) NOT NULL,
	CPF VARCHAR(11) NOT NULL,
    EMAIL VARCHAR(150) NOT NULL,
    TELEFONE VARCHAR(20) NOT NULL,
    RUA VARCHAR(120),
    BAIRRO VARCHAR(100),
    NUMERO INT,
    CIDADE_ID INT,
    ESTADO_ID INT,
    CONSTRAINT PK_PESSOA PRIMARY KEY (ID),
    CONSTRAINT FK_PESSOA_CIDADE FOREIGN KEY (CIDADE_ID) REFERENCES MUNICIPIO(ID)
);

CREATE TABLE ALUNO (
	ID INT NOT NULL,
    PESSOA_ID INT NOT NULL,
    CONSTRAINT PK_ALUNO PRIMARY KEY (ID),
    CONSTRAINT FK_ALUNO_PESSOA FOREIGN KEY (PESSOA_ID) REFERENCES PESSOA(ID)
);

CREATE TABLE PROFESSOR (
	ID INT NOT NULL,
    PESSOA_ID INT NOT NULL,
    CONSTRAINT PK_PROFESSOR PRIMARY KEY (ID),
    CONSTRAINT FK_PROFESSOR_PESSOA FOREIGN KEY (PESSOA_ID) REFERENCES PESSOA(ID)
);

CREATE TABLE CURSO (
	ID INT NOT NULL,
    DESCRICAO VARCHAR(250) NOT NULL,
    QTD_SEMESTRES INT NOT NULL,
    HORAS_TOTAIS INT DEFAULT 0 NOT NULL,
    CONSTRAINT PK_CURSO PRIMARY KEY(ID)
);

CREATE TABLE DISCIPLINA (
	ID INT NOT NULL,
    DESCRICAO VARCHAR(250) NOT NULL,
    CARGA_HORARIA INT NOT NULL,
    PROFESSOR_ID INT NOT NULL,
    CONSTRAINT PK_DISCIPLINA PRIMARY KEY (ID),
    CONSTRAINT FK_DISC_PROF FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR(ID)
);

CREATE TABLE DISCIPLINAXCURSO(
	ID INT NOT NULL,
	DISCIPLINA_ID INT NOT NULL,
	CURSO_ID INT NOT NULL,
	SEMESTRE INT NOT NULL,
	PRIMARY KEY(ID),
	CONSTRAINT FK_DISC_CURSO_DISC FOREIGN KEY(DISCIPLINA_ID) REFERENCES DISCIPLINA(ID),
	CONSTRAINT FK_DISC_CURSO_CURSO FOREIGN KEY(CURSO_ID) REFERENCES CURSO(ID)
);

CREATE TABLE TURMA (
	ID INT NOT NULL,
    DISCIPLINA_ID INT NOT NULL,
    CURSO_ID INT NOT NULL,
    ANO_INICIO INT NOT NULL,
    SEMESTRE_INICIO INT NOT NULL,
    CONSTRAINT PK_TURMA PRIMARY KEY(ID),
    CONSTRAINT FK_TURMA_DISC FOREIGN KEY (DISCIPLINA_ID) REFERENCES DISCIPLINA(ID),
    CONSTRAINT FK_TURMA_CURSO FOREIGN KEY (CURSO_ID) REFERENCES CURSO(ID)
);

CREATE TABLE TURMAXALUNOS(
	ID INT NOT NULL,
	TURMA_ID INT NOT NULL,
	ALUNO_ID INT NOT NULL,
	CONSTRAINT PK_TURMAXALUNOS PRIMARY KEY(ID),
	CONSTRAINT FK_TURMA_ALUNO_TURMA FOREIGN KEY(TURMA_ID) REFERENCES TURMA(ID),
	CONSTRAINT FK_TURMA_ALUNO_ALUNO FOREIGN KEY(ALUNO_ID) REFERENCES ALUNO(ID)
);

CREATE SEQUENCE SEQ_ALUNO;
CREATE SEQUENCE SEQ_CURSO;
CREATE SEQUENCE SEQ_DISCIPLINA;
CREATE SEQUENCE SEQ_ESTADO;
CREATE SEQUENCE SEQ_MUNICIPIO;
CREATE SEQUENCE SEQ_PESSOA;
CREATE SEQUENCE SEQ_PROFESSOR;
CREATE SEQUENCE SEQ_TURMA;
CREATE SEQUENCE SEQ_DXC;


-------- PROCEDURES CRUD ----------
CREATE OR ALTER PROCEDURE INSERE_ALUNO_PROFESSOR(P_NOME VARCHAR(255), P_CPF VARCHAR(11), P_EMAIL VARCHAR(150), P_TELEFONE VARCHAR(20), P_RUA VARCHAR(120), P_BAIRRO VARCHAR(100), P_NUMERO INT, P_CIDADE_ID INT, P_TIPO_INSERCAO VARCHAR(1))
AS
	DECLARE ULTIMO_ID INT;
	DECLARE ID_INSERT INT;
BEGIN
	
	SELECT GEN_ID(SEQ_PESSOA, 1) FROM RDB$DATABASE INTO :ULTIMO_ID;

	INSERT INTO PESSOA(ID, NOME, CPF, EMAIL, TELEFONE, RUA, BAIRRO, NUMERO, CIDADE_ID) VALUES (:ULTIMO_ID, :P_NOME, :P_CPF, :P_EMAIL, :P_TELEFONE, :P_RUA, :P_BAIRRO, :P_NUMERO, :P_CIDADE_ID);
    IF(:P_TIPO_INSERCAO = 'A') THEN
    BEGIN
	    SELECT GEN_ID(SEQ_ALUNO, 1) FROM RDB$DATABASE INTO :ID_INSERT;
		INSERT INTO ALUNO(ID, PESSOA_ID) VALUES (:ID_INSERT, :ULTIMO_ID);
    END
    IF(:P_TIPO_INSERCAO = 'P') THEN
    BEGIN
	    SELECT GEN_ID(SEQ_PROFESSOR, 1) FROM RDB$DATABASE INTO :ID_INSERT;
		INSERT INTO PROFESSOR(ID, PESSOA_ID) VALUES (:ID_INSERT, :ULTIMO_ID);
    END
END;

CREATE OR ALTER PROCEDURE ATUALIZA_PESSOA(P_ID INT, P_NOME VARCHAR(255), P_CPF VARCHAR(11), P_EMAIL VARCHAR(150), P_TELEFONE VARCHAR(20), P_RUA VARCHAR(120), P_BAIRRO VARCHAR(100), P_NUMERO INT, P_CIDADE_ID INT)
AS
BEGIN
	UPDATE PESSOA SET NOME = :P_NOME, CPF = :P_CPF, EMAIL = :P_EMAIL, TELEFONE = :P_TELEFONE, RUA = :P_RUA, BAIRRO = :P_BAIRRO, NUMERO = :P_NUMERO, CIDADE_ID = :P_CIDADE_ID
     WHERE ID = :P_ID;
END;

CREATE OR ALTER PROCEDURE ATUALIZA_ESTADO_MUNICIPIO(P_MUN_ID INT, P_UF VARCHAR(2))
AS
	DECLARE ID_ESTADO INT;
BEGIN
	SELECT FIRST 1 ID FROM ESTADO WHERE UF = :P_UF INTO :ID_ESTADO;
	UPDATE MUNICIPIO SET ESTADO_ID = :ID_ESTADO WHERE ID = :P_MUN_ID;
END;

CREATE OR ALTER PROCEDURE ATUALIZA_HORAS_TOTAIS(P_CURSO_ID INT, P_DISC_ID INT, P_ADICIONAR BOOLEAN)
AS 
	DECLARE VAR_HORAS_AUX INT;
BEGIN 
	SELECT CARGA_HORARIA FROM DISCIPLINA WHERE ID = :P_DISC_ID INTO :VAR_HORAS_AUX;
	IF(P_ADICIONAR IS TRUE) THEN 
	BEGIN 
		UPDATE CURSO SET HORAS_TOTAIS = HORAS_TOTAIS + :VAR_HORAS_AUX WHERE ID = :P_CURSO_ID;
	END
	ELSE 
	BEGIN 
		UPDATE CURSO SET HORAS_TOTAIS = HORAS_TOTAIS - :VAR_HORAS_AUX WHERE ID = :P_CURSO_ID;
	END
END;

	

----------- TRIGGERS -----------
CREATE TRIGGER DELETA_PESSOA_ALUNO 
	AFTER
DELETE
	ON
	ALUNO 
    AS
BEGIN
		DELETE
FROM
	PESSOA
WHERE
	ID = OLD.PESSOA_ID;
END;

CREATE TRIGGER DELETA_PESSOA_PROFESSOR
	AFTER DELETE ON PROFESSOR 
    AS
   BEGIN 
  	DELETE FROM PESSOA WHERE ID = OLD.PESSOA_ID;
END;

CREATE TRIGGER SETA_ESTADO
	AFTER INSERT ON MUNICIPIO
	AS
	BEGIN 
	EXECUTE PROCEDURE ATUALIZA_ESTADO_MUNICIPIO(NEW.ID, NEW.UF);	
END;

CREATE TRIGGER ADD_HORAS_TOTAIS
	AFTER INSERT ON DISCIPLINAXCURSO
	AS 
	BEGIN 
		EXECUTE PROCEDURE ATUALIZA_HORAS_TOTAIS(NEW.CURSO_ID, NEW.DISCIPLINA_ID, TRUE);
END;

CREATE TRIGGER SUBT_HORAS_TOTAIS
	AFTER DELETE ON DISCIPLINAXCURSO
	AS 
	BEGIN 
		EXECUTE PROCEDURE ATUALIZA_HORAS_TOTAIS(OLD.CURSO_ID, OLD.DISCIPLINA_ID, FALSE);	
END;

CREATE TRIGGER DELETE_CHILDS
	AFTER DELETE ON CURSO
	AS 
	BEGIN 
		DELETE FROM DISCIPLINAXCURSO WHERE CURSO_ID = OLD.ID;
END;

------------- PESQUISAS ---------------

CREATE OR ALTER PROCEDURE PESQUISAR_CIDADE(P_NOME VARCHAR(255) DEFAULT '')
RETURNS (ID INT, CODIGO INT, NOME VARCHAR(50), UF CHAR(2), ESTADO_ID INT)
AS
BEGIN
	IF(:P_NOME IS NOT NULL AND :P_NOME <> '') THEN
	BEGIN
		FOR SELECT ID, CODIGO, NOME, UF, ESTADO_ID  FROM MUNICIPIO WHERE UPPER(NOME) LIKE '%' || UPPER(:P_NOME) || '%'
		INTO :ID, :CODIGO, :NOME, :UF, :ESTADO_ID
		DO
		BEGIN
			SUSPEND;
		END	
	END
	ELSE 
		BEGIN
			FOR SELECT ID, CODIGO, NOME, UF, ESTADO_ID  FROM MUNICIPIO WHERE NOME LIKE '%' || NOME || '%'
		INTO :ID, :CODIGO, :NOME, :UF, :ESTADO_ID
		DO
		BEGIN
			SUSPEND;
		END
		END
END;

CREATE OR ALTER PROCEDURE PESQUISAR_ALUNO(P_ID INT DEFAULT NULL)
RETURNS (ID INT, PESSOA_ID INT)
AS 
	DECLARE QUERY VARCHAR(255);
BEGIN 
	:QUERY = 'SELECT ID, PESSOA_ID FROM ALUNO';
	IF(:P_ID IS NOT NULL) THEN
	BEGIN
		:QUERY = :QUERY || ' WHERE ID = ' || :P_ID;
	END
	FOR EXECUTE STATEMENT (QUERY) INTO :ID, :PESSOA_ID
	DO
	SUSPEND;
END;

CREATE OR ALTER PROCEDURE PESQUISAR_PROFESSOR(P_ID INT DEFAULT NULL)
RETURNS (ID INT, PESSOA_ID INT)
AS 
	DECLARE QUERY VARCHAR(255);
BEGIN 
	:QUERY = 'SELECT ID, PESSOA_ID FROM PROFESSOR';
	IF(:P_ID IS NOT NULL) THEN
	BEGIN
		:QUERY = :QUERY || ' WHERE ID = ' || :P_ID;
	END
	FOR EXECUTE STATEMENT (QUERY) INTO :ID, :PESSOA_ID
	DO
	SUSPEND;
END;
---------------------------------------

Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 12, 'Acre', 'AC', 1);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 27, 'Alagoas', 'AL', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 16, 'Amapá', 'AP', 1);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 13, 'Amazonas', 'AM', 1);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 29, 'Bahia', 'BA', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 23, 'Ceará', 'CE', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 53, 'Distrito Federal', 'DF', 5);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 32, 'Espírito Santo', 'ES', 3);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 52, 'Goiás', 'GO', 5);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 21, 'Maranhão', 'MA', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 51, 'Mato Grosso', 'MT', 5);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 50, 'Mato Grosso do Sul', 'MS', 5);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 31, 'Minas Gerais', 'MG', 3);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 15, 'Pará', 'PA', 1);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 25, 'Paraíba', 'PB', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 41, 'Paraná', 'PR', 4);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 26, 'Pernambuco', 'PE', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 22, 'Piauí', 'PI', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 33, 'Rio de Janeiro', 'RJ', 3);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 24, 'Rio Grande do Norte', 'RN', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 43, 'Rio Grande do Sul', 'RS', 4);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 11, 'Rondônia', 'RO', 1);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 14, 'Roraima', 'RR', 1);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 42, 'Santa Catarina', 'SC', 4);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 35, 'São Paulo', 'SP', 3);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 28, 'Sergipe', 'SE', 2);
Insert into Estado (ID, CodigoUf, Nome, Uf, Regiao) values (GEN_ID(SEQ_ESTADO, 1), 17, 'Tocantins', 'TO', 1);
;